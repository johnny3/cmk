<?php

namespace Shakyamouni\SiteBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query;

/**
 * EventRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EventRepository extends EntityRepository {

    public function findAllBySubCategoryASCAndTitleASC()
    {
        $qb = $this->createQueryBuilder('e')
                ->leftJoin('e.subCategoryEvent', 'sc')
                ->addSelect('sc')
                ->OrderBy('sc.position', 'ASC')
                ->addOrderBy('sc.title', 'ASC')
                ->addOrderBy('e.eventDateStart', 'DESC');

        return $qb->getQuery()
                        ->getResult();
    }

    public function getEventsBySubcategory($subcategory_event)
    {        
        return $this->getEventsBySubcategoryQuery($subcategory_event)
                    ->andWhere('e.isVisible = :isPublished')
                    ->setParameter('isPublished', true)
                    ->andWhere('e.eventDateEnd >= :today')
                    ->setParameter('today', new \DateTime('now'))
                    ->getQuery()
                    ->getResult();
    }
    public function getEventsBySubcategoryQuery($subcategory_event)
    {
        $qb = $this->createQueryBuilder('e')
                ->leftJoin('e.subCategoryEvent', 'sc')
                ->addSelect('sc')
                ->andWhere('sc.slug = :subcategory_event_slug')
                ->setParameter('subcategory_event_slug', $subcategory_event)
                ->orderBy('e.eventDateStart', 'ASC');

        return $qb;
    }

    public function getEventBySubcategorySlug($subcategory_event, $slug)
    {
        $qb = $this->getEventsBySubcategoryQuery($subcategory_event)
                ->andWhere('e.slug = :event_slug')
                ->setParameter('event_slug', $slug);

        return $qb->getQuery()
                        ->getOneOrNullResult();
    }

    public function getEventsWithArticleEvents()
    {
        $qb = $this->createQueryBuilder('e')
                ->leftJoin('e.articleevents', 'a')
                ->addSelect('a')
                ->where('a is not null')
                ->OrderBy('e.title', 'ASC');

        return $qb->getQuery()
                        ->getResult();
    }

    public function getFutureEventsQuery()
    {
        $qb = $this->createQueryBuilder('e')
              //  ->where('e.eventDateStart < :today')
                ->andWhere('e.eventDateEnd >= :today')
                ->andWhere('e.isVisible = :isPublished')
                ->setParameter('isPublished', true)
                ->leftJoin('e.articleevents', 'a')
                ->addSelect('a')
                ->andWhere('a is null')
                ->setParameter('today', new \DateTime('now'))
                ->orderBy('e.eventDateStart', 'ASC');

        return $qb;
    }
    
        public function getEventBySubcategorySlugByDateAsc($subcategory_event)
    {
        $qb = $this->getEventsBySubcategoryQuery($subcategory_event)
                ->andWhere('e.eventDateEnd >= :today')
                ->setParameter('today', new \DateTime('now'))
                ->andWhere('e.isVisible = :isPublished')
                ->setParameter('isPublished', true);

        return $qb->getQuery()
                        ->getResult();
    }

    public function getAllEventsByYear($year)
    {
        $r = array();
        
        $qb = $this->createQueryBuilder('e')
                ->where('SUBSTRING(e.eventDateStart, 1, 4) = :year')
                ->setParameter('year', $year)
                ->getQuery()
                ->getResult(Query::HYDRATE_ARRAY);

        foreach ($qb as $d) {
            $r[strtotime($d['eventDateStart']->format("Y-m-d"))][$d['id']] = $d['title'];
        }

        return $r;
    }
}